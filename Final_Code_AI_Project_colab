{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Final_Code_AI_Project","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"UYt-_ft-PyGn","colab_type":"code","colab":{}},"cell_type":"code","source":["#mkdir AI_project Test"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ygT_RVu5QAVk","colab_type":"code","colab":{}},"cell_type":"code","source":["#mv BTEST1.wav BTEST2.wav BTEST3.wav BTEST4.wav BTEST5.wav AI_project"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hqZOc5hpO7Oh","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np   \n","import wave\n","import os \n","import matplotlib.pyplot as plt\n","from scipy.io import wavfile\n","from scipy.fftpack import fft,fftfreq"],"execution_count":0,"outputs":[]},{"metadata":{"id":"V926Khd3PBbW","colab_type":"code","colab":{}},"cell_type":"code","source":["def loaddata (path):                      # load the data and extrat frequencies\n","                                          #of each sound file  \n","  samplerate, data = wavfile.read(path)   # Return the sample rate \n","  samplerate                              #(in samples/sec) and data from \n","  data.shape                              #a WAV file \n","  samples = data.shape[0]\n","  samples\n","  datafft = fft(data)   # returns Fast Fourier Transform of the data \n","  fftabs = abs(datafft)  # Take absolute values \n","  freqs = fftfreq(samples,1/samplerate) #Return the Discrete Fourier Transform \n","                                        #sample frequencies.\n","  Frequency = []\n","  for i in range(len(fftabs)):\n","    Frequency.append(data[i][0])  # This For loop to extract the first \n","                                  #value of data list\n","\n","  return Frequency\n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"Lt2QMVvAPf2E","colab_type":"code","outputId":"ca9d4657-4e78-428c-f33e-e29c431c5e17","executionInfo":{"status":"ok","timestamp":1555912541514,"user_tz":-240,"elapsed":466,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":168}},"cell_type":"code","source":["traindata = []       # an empty list to append later \n","trainlb = []         # an empty list to append later  \n","folder = 'AI_project'           # sound files are listed here  \n","files = os.listdir(folder)    # Read files in Sounds folder \n","files"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['.ipynb_checkpoints',\n"," 'BTEST4.wav',\n"," 'MTEST1.wav',\n"," 'BTEST3.wav',\n"," 'BTEST1.wav',\n"," 'MTEST2.wav',\n"," 'BTEST2.wav',\n"," 'MTEST4.wav',\n"," 'MTEST3.wav']"]},"metadata":{"tags":[]},"execution_count":10}]},{"metadata":{"id":"n0hrG6bH3Vvt","colab_type":"code","outputId":"bf6963b1-4044-41a6-b222-8316bb380494","executionInfo":{"status":"ok","timestamp":1555912546878,"user_tz":-240,"elapsed":4571,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":151}},"cell_type":"code","source":["for filename in files:    \n","    # a for loop to check files before reading,mayby there is a checkpoint file\n","    # appears.\n","    if filename[0]=='B' or filename[0]=='M':    \n","      \n","      # send each sound file to loadfile function \n","      data = loaddata (folder+\"//\" +filename)   \n","      # crop the sound files to min length of them which is 747859\n","      traindata.append(data[0:747859]) \n","      # append Labels to trainlb either B for Braa and M for Mohammed \n","      trainlb.append(filename[0])               \n","      print(filename)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["BTEST4.wav\n","MTEST1.wav\n","BTEST3.wav\n","BTEST1.wav\n","MTEST2.wav\n","BTEST2.wav\n","MTEST4.wav\n","MTEST3.wav\n"],"name":"stdout"}]},{"metadata":{"id":"0v9Cx_VZQ4eu","colab_type":"code","colab":{}},"cell_type":"code","source":["# convert traindata to a numpy array \n","traindata= np.array(traindata)         \n","# reshape the lable list to one column and multible rows \n","trainlb = np.array(trainlb).reshape(-1,1)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"Ml0ckvpLX86a","colab_type":"code","outputId":"7a6eac08-87eb-4932-f08b-157594b9e97e","executionInfo":{"status":"ok","timestamp":1555912550149,"user_tz":-240,"elapsed":492,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":84}},"cell_type":"code","source":["#check the type of lable list before entering the model\n","print(type(trainlb)) \n","# check the shape of lable list before entering the model\n","print(trainlb.shape)   \n","# check the type of train data before entering the model\n","print(type(traindata)) \n","# check the shape of train data before entering the model \n","print(traindata.shape) "],"execution_count":13,"outputs":[{"output_type":"stream","text":["<class 'numpy.ndarray'>\n","(8, 1)\n","<class 'numpy.ndarray'>\n","(8, 747859)\n"],"name":"stdout"}]},{"metadata":{"id":"6tBcOY-YZVUN","colab_type":"code","outputId":"0f3f6983-8aaa-49e6-c369-12fafa5f70b4","executionInfo":{"status":"ok","timestamp":1555912552016,"user_tz":-240,"elapsed":1048,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"cell_type":"code","source":["# use Label Encoder for B and M before training \n","from sklearn.preprocessing import LabelEncoder    \n","# create the LabelEncoder object \n","le1 = LabelEncoder()\n","# apply the LabelEncoder for train label data\n","trainlb = le1.fit_transform(trainlb).reshape(-1,1)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"metadata":{"id":"iNPhJ3iNZhxD","colab_type":"code","colab":{}},"cell_type":"code","source":["# Use logisticRegression model for the case \n","from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression(C=4.0,max_iter=1000000, verbose=1,penalty='l1')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"r4xbIGKGZrjo","colab_type":"code","outputId":"be38ff97-49fb-4aeb-bbe8-b8b3ec998192","executionInfo":{"status":"ok","timestamp":1555912558515,"user_tz":-240,"elapsed":4416,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":171}},"cell_type":"code","source":["# Train the data\n","model.fit(traindata,trainlb)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:761: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[LibLinear]"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=4.0, class_weight=None, dual=False, fit_intercept=True,\n","          intercept_scaling=1, max_iter=1000000, multi_class='warn',\n","          n_jobs=None, penalty='l1', random_state=None, solver='warn',\n","          tol=0.0001, verbose=1, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":16}]},{"metadata":{"id":"X3CnOYysZ2r7","colab_type":"text"},"cell_type":"markdown","source":["# Testing ................................................."]},{"metadata":{"id":"5dgzyLezZxd0","colab_type":"code","colab":{}},"cell_type":"code","source":["# load a test file \n","testdata = loaddata ('Test/BTEST5.wav')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gVzUORDCZ_pL","colab_type":"code","outputId":"760078e2-7dba-4539-e4f8-c5c3f850d1d9","executionInfo":{"status":"ok","timestamp":1555912592982,"user_tz":-240,"elapsed":661,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"cell_type":"code","source":["# crop the test file and send it to load data function\n","testdata = testdata[0:747859]\n","# reshape the data \n","testdata = np.array(testdata).reshape(1,-1)\n","print(type(testdata))\n","print(testdata.shape)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["<class 'numpy.ndarray'>\n","(1, 747859)\n"],"name":"stdout"}]},{"metadata":{"id":"AUTF3TWwaO14","colab_type":"code","colab":{}},"cell_type":"code","source":["# Prediction  \n","Prediction = model.predict(testdata)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dVM0JqiCaSQr","colab_type":"code","outputId":"91ee4272-174f-44f7-c565-cc08814d0e85","executionInfo":{"status":"ok","timestamp":1555912595571,"user_tz":-240,"elapsed":692,"user":{"displayName":"Kaizen Center","photoUrl":"","userId":"16822689695403405681"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# Do inverse transform to find the predicted person \n","Person = le1.inverse_transform(Prediction)\n","if Person == 'B':\n","  print (\"Braa Mohamad Salim Kakah\")\n","if Person == 'M':\n","    print (\"Mohammed AlNuaimi\")\n"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Braa Mohamad Salim Kakah\n"],"name":"stdout"}]},{"metadata":{"id":"jg25wUr8nc4k","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}